{"version":3,"sources":["Checkbox.js","Graph.js","Portfolio.js","Home.js","NewPortfolio.js","Main.js","index.js"],"names":["Checkbox","_ref","_ref$type","type","name","_ref$checked","checked","onChange","react_default","a","createElement","className","Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTimeRangeChange","timerange","setState","tRange","handleCheck","bind","assertThisInitialized","handleStartDateChange","handleEndDateChange","handleClick","state","pName","list","sList","map","obj","stock_symbol","checkedItems","startDate","Date","endDate","data","symbol","values","dataLoaded","styles","categories","e","item","target","oldSelected","date","originalRange","TimeRange","getTime","key","stockList","push","length","alert","timeDiff","url","i","getHistoricalData","result","val","k","d","Number","keys","columns","points","reverse","j","width","color","getRandomColor","label","hUrl","Promise","resolve","reject","fetch","then","res","json","Math","floor","random","legend","chart","_this2","isLoaded","style","styler","categ","charts","dataArr","max","min","series","TimeSeries","entry","axis","interpolation","timeRange","enablePanZoom","onTimeRangeChanged","maxTime","end","minTime","begin","height","id","format","align","react_loading_default","src_Checkbox","react_datepicker_es","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","timeCaption","onClick","React","Component","ReactModal","setAppElement","Portfolio","newStockBtn","addStockBtn","addStockSymbolChange","addStockQuantityChange","addStockCancel","deleteItem","refresh","showEuros","showDollars","toggleRow","removeStocks","perfGraph","closeModal","pDataInMemory","JSON","parse","window","localStorage","getItem","index","requested_input","memory_index","stock_list","new_symbol","new_quantity","loading","currency","currency_multiplier","old_multiplier","needs_refresh","show_modal","oldData","setItem","stringify","catch","err","other_url","stock_price","toRefresh","findIndex","object","getStockPrice","value","unit_value","total_value","stock_quantity","selectionList","toRemove","splice","success","rates","USD","isInteger","some","_this3","newList","toUpperCase","event","deletePortfolio","mapFn","reduce","_this4","placeholder","Header","accessor","Cell","original","sortable","toFixed","es","resolveData","row","showPagination","defaultPageSize","noDataText","resizable","o","c","output","lib_default","isOpen","src_Graph","Home","pListInMemory","pList","undefined","location","oldList","portName","new_pList","indexOf","old_dataList","portfolio","src_Portfolio","NewPortfolio","toHome","handleChange","handleSubmit","preventDefault","Redirect","to","pathname","onSubmit","Main","HashRouter","NavLink","exact","Route","path","component","ReactDOM","render","src_Main","document","getElementById"],"mappings":"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","file":"static/js/main.d2bfba9d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* this creates a checkbox for the React Table component */\r\n\r\nconst Checkbox = ({ type = 'checkbox', name, checked = false, onChange }) => (\r\n  <input type={type} name={name} checked={checked} onChange={onChange} \r\n    className=\"w3-check w3-right\"/>\r\n);\r\n\r\nCheckbox.propTypes = {\r\n  type: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool,\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Checkbox;","import React from \"react\";\r\nimport Checkbox from \"./Checkbox.js\"\r\nimport DatePicker from \"react-datepicker\";\r\nimport {\r\n    Charts,\r\n    ChartContainer,\r\n    ChartRow,\r\n    YAxis,\r\n    LineChart,\r\n    Resizable,\r\n    styler,\r\n    Legend\r\n} from \"react-timeseries-charts\";\r\nimport { TimeRange, TimeSeries } from \"pondjs\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'w3-css/w3.css';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\nclass Graph extends React.Component {\r\n    // this component defines the whole content in the modal window\r\n    // not just the Graph..\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // binding functions\r\n        this.handleCheck = this.handleCheck.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleTimeRangeChange = this.handleTimeRangeChange.bind(this);\r\n\r\n        this.state ={\r\n            name: this.props.pName,\r\n            list: this.props.sList.map(obj => obj.stock_symbol),\r\n            checkedItems: {},\r\n            startDate: new Date(),\r\n            endDate: new Date(),\r\n            data: {\r\n                symbol: '',\r\n                values: [],\r\n            },\r\n            dataLoaded: false,\r\n            styles: [],\r\n            categories: []\r\n        };\r\n    }\r\n\r\n    handleCheck(e) {\r\n        // if stock is checked adding to array\r\n        const item = e.target.name;\r\n\r\n        var oldSelected = this.state.checkedItems;\r\n        oldSelected[item] = !this.state.checkedItems[item];\r\n\r\n        this.setState({\r\n            checkedItems: oldSelected\r\n        });\r\n    }\r\n\r\n    handleStartDateChange(date) {\r\n        // modifying state when date is modified\r\n        // the last two items are needed for the Graph library\r\n        this.setState({\r\n            startDate: date,\r\n            originalRange: new TimeRange([date.getTime(), this.state.endDate.getTime()]),\r\n            tRange: new TimeRange([date.getTime(), this.state.endDate.getTime()])\r\n        });\r\n    }\r\n\r\n    handleEndDateChange(date) {\r\n        this.setState({\r\n            endDate: date,\r\n            originalRange: new TimeRange([this.state.startDate.getTime(), date.getTime()]),\r\n            tRange: new TimeRange([this.state.startDate.getTime(), date.getTime()])\r\n        });\r\n\r\n    }\r\n\r\n    handleTimeRangeChange = timerange => {\r\n        this.setState({\r\n            tRange: timerange\r\n         });\r\n    };\r\n\r\n    async handleClick() {\r\n        // API Call to get historical data for the stocks\r\n        var stockList = [];\r\n        var data = [];\r\n\r\n        for (var key in this.state.checkedItems)\r\n        {\r\n            // determining what we have to search for\r\n            if(this.state.checkedItems[key] === true)\r\n            {\r\n                stockList.push(key);\r\n            }\r\n        }\r\n\r\n        // validating input\r\n        if(stockList.length === 0)\r\n        {\r\n            alert(\"Please select at least a stock\");\r\n        }\r\n        else\r\n        {\r\n            /* \r\n                determining the apropriate API Call\r\n                I want to obtain a reasonable number of data points for the graph\r\n            */\r\n            var timeDiff = this.state.endDate - this.state.startDate;\r\n            var url = \"https://www.alphavantage.co/query?function=\";\r\n\r\n            if(timeDiff / 1000 / 60 / 60 <= 24)\r\n            {\r\n                // fewer than 24 hrs => every minute\r\n                url = url + \"TIME_SERIES_INTRADAY&interval=1min&outputsize=full&apikey=ICK74I6KCSZI8JZ1&symbol=\";\r\n            }\r\n            else if(timeDiff / 1000 / 60 / 60 / 24 < 50)\r\n            {\r\n                // 1 - 50 days => hourly data\r\n                url = url + \"TIME_SERIES_INTRADAY&interval=60min&outputsize=full&apikey=ICK74I6KCSZI8JZ1&symbol=\";\r\n            }\r\n            else\r\n            {\r\n                // > 50 days => daily data\r\n                url = url + \"TIME_SERIES_DAILY&outputsize=full&apikey=ICK74I6KCSZI8JZ1&symbol=\";\r\n            }\r\n\r\n            if(timeDiff <= 0)\r\n            {\r\n                alert(\"That time period isn't valid\");\r\n            }\r\n            else\r\n            {\r\n                for(var i=0; i<stockList.length; i++)\r\n                {\r\n                    // parsing symbol list and making API Calls\r\n\r\n                    const result = await this.getHistoricalData(stockList[i], url);\r\n                    var val = [];\r\n                    \r\n                    // since the DAILY API call returns all historical data, I have to\r\n                    // cut what isn't in the specified time period\r\n                    if (result === -1)\r\n                    {\r\n                        alert(\"Please try again. Data for \" + stockList[i] + \" could not be found. API Call limit might be exceded.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        for (var k in result)\r\n                        {\r\n                            var d = new Date(k);\r\n                            if(d - this.state.startDate >=0 && this.state.endDate - d >= 0)\r\n                            {\r\n                                val.push([d.getTime(), Number(result[k][Object.keys(result[k])[0]])]);\r\n                            }\r\n                        }\r\n                        \r\n                        // this formatting is necessary for the TimeSeries part of the Graph\r\n                        data.push({\r\n                            name: stockList[i],\r\n                            columns: [\"time\", stockList[i]],\r\n                            points: val.reverse()\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n\r\n                // styles - for line color\r\n                // categories - for legend\r\n\r\n                var styles = [];\r\n                var categories = [];\r\n                for(var j = 0; j<data.length; j++)\r\n                {\r\n                    styles.push({\r\n                        key: data[j].name,\r\n                        width: 2,\r\n                        color: this.getRandomColor()\r\n                    });\r\n\r\n                    categories.push({\r\n                        key: data[j].name,\r\n                        label: data[j].name\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    data: data,\r\n                    dataLoaded: true,\r\n                    styles: styles,\r\n                    categories: categories\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async getHistoricalData(symbol, url)\r\n    {\r\n        // function for the api call\r\n\r\n        var hUrl = url + symbol;\r\n\r\n        return new Promise((resolve, reject) => {\r\n        fetch(hUrl)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if(\"Note\" in result)\r\n                    {\r\n                        resolve(-1);\r\n                    }\r\n                    else\r\n                    {\r\n                        resolve(result[Object.keys(result)[1]]);\r\n                    }\r\n                }\r\n                )\r\n        });\r\n    }\r\n\r\n    getRandomColor() {\r\n        // for styling - line color\r\n        // found on stackoverflow\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    render() {\r\n        const isLoaded = this.state.dataLoaded;\r\n        const style = styler(this.state.styles);\r\n        const categ = this.state.categories;\r\n        let charts = [];\r\n        let legend;\r\n        let chart;\r\n\r\n        if(isLoaded)\r\n        {\r\n            const dataArr = this.state.data;\r\n            // max and min are for the Y axis value limit\r\n            var max = 0;\r\n            var min = 10000;\r\n\r\n\r\n            for(var i=0; i<dataArr.length; i++)\r\n            {\r\n                const series = new TimeSeries(dataArr[i]);\r\n\r\n                if(series.min(dataArr[i].name) < min)\r\n                {\r\n                    min = series.min(dataArr[i].name);\r\n                }\r\n                if(series.max(dataArr[i].name) > max)\r\n                {\r\n                    max = series.max(dataArr[i].name);\r\n                }\r\n\r\n                charts.push(\r\n                    <LineChart\r\n                        key={dataArr[i]}\r\n                        axis=\"y\"\r\n                        interpolation=\"curveLinear\"\r\n                        series={series}\r\n                        columns={dataArr[i]}\r\n                        style={style}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const timeRange = this.state.tRange;\r\n\r\n            chart =  <Resizable>\r\n            <ChartContainer timeRange={timeRange}\r\n                            enablePanZoom={true}\r\n                            onTimeRangeChanged={this.handleTimeRangeChange}\r\n                            maxTime={this.state.originalRange.end()}\r\n                            minTime={this.state.originalRange.begin()} >\r\n            <ChartRow height=\"300\">\r\n            <YAxis id=\"y\" width={50} label=\"Price ($)\" min={min} max={max} type=\"linear\" format=\".2f\"/>\r\n              <Charts>\r\n                {charts}\r\n              </Charts>\r\n            </ChartRow>\r\n          </ChartContainer>\r\n          </Resizable>;\r\n\r\n          \r\n          legend = <Legend\r\n                type=\"line\"\r\n                align=\"right\"\r\n                style={style}\r\n                categories={categ}\r\n            />;\r\n        }\r\n        else\r\n        {\r\n            // showing a loading component and a prompt to search for data\r\n            chart = <div>\r\n                        <h4 className=\"w3-margin\">Press the button.</h4>\r\n                        <ReactLoading type={\"bars\"} color={'#687681'} height={'30%'} width={'30%'} />\r\n                    </div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"w3-row-padding \">\r\n                <div className=\"w3-left w3-mobile w3-quarter\">\r\n                    <h3 className=\"w3-row-padding\">\r\n                        {this.state.name} Performance\r\n                    </h3>\r\n\r\n                    <ul className=\"w3-ul\">\r\n                        {this.state.list.map(item => (\r\n                            <li>\r\n                                <label key={item}>\r\n                                    <span>\r\n                                        {item}\r\n                                    </span>\r\n                                    <Checkbox name={item} \r\n                                            checked={this.state.checkedItems[item]} \r\n                                            onChange={this.handleCheck} \r\n                                            className=\"w3-check\" />\r\n                                </label>\r\n                            </li>\r\n                            \r\n                        ))\r\n                        }\r\n                    </ul>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"w3-rest w3-mobile w3-margin-top w3-margin-bottom w3-margin-right\">\r\n                    <div className=\"w3-margin\">\r\n                        {chart}\r\n                    </div>\r\n                    <div>\r\n                        {legend}\r\n                    </div>\r\n\r\n                    <div className=\" w3-margin w3-mobile\">\r\n                        <span className=\"w3-margin-left w3-mobile\">\r\n                            <DatePicker\r\n                                selected={this.state.startDate}\r\n                                onChange={this.handleStartDateChange}\r\n                                showTimeSelect\r\n                                timeFormat=\"HH:mm\"\r\n                                timeIntervals={15}\r\n                                dateFormat=\"dd/MM/yyyy h:mm\"\r\n                                timeCaption=\"time\"\r\n                            />\r\n                        </span>\r\n                        <span className=\"w3-margin-left w3-mobile\">\r\n                            <DatePicker\r\n                                selected={this.state.endDate}\r\n                                onChange={this.handleEndDateChange}\r\n                                showTimeSelect\r\n                                timeFormat=\"HH:mm\"\r\n                                timeIntervals={15}\r\n                                dateFormat=\"dd/MM/yyyy h:mm\"\r\n                                timeCaption=\"time\"\r\n                            />\r\n                        </span>\r\n                        <button \r\n                            onClick={this.handleClick}\r\n                            className=\"w3-button w3-round w3-small w3-dark-grey w3-margin-left w3-mobile\">\r\n                            Go\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n   \r\n  export default Graph;","import React from \"react\"\r\nimport ReactTable from 'react-table'\r\nimport 'react-table/react-table.css'\r\nimport ReactModal from 'react-modal'\r\nimport Graph from './Graph'\r\nimport 'w3-css/w3.css';\r\n\r\nReactModal.setAppElement('#root');\r\n\r\nclass Portfolio extends React.Component {\r\n\r\n    /* this is the main class of the app\r\n       A component that displays everything we want is defined */\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        // binding click functions\r\n        this.newStockBtn = this.newStockBtn.bind(this);\r\n        this.addStockBtn = this.addStockBtn.bind(this);\r\n        this.addStockSymbolChange = this.addStockSymbolChange.bind(this);\r\n        this.addStockQuantityChange = this.addStockQuantityChange.bind(this);\r\n        this.addStockCancel = this.addStockCancel.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.showEuros = this.showEuros.bind(this);\r\n        this.showDollars = this.showDollars.bind(this);\r\n        this.toggleRow = this.toggleRow.bind(this);\r\n        this.removeStocks = this.removeStocks.bind(this);\r\n        this.perfGraph = this.perfGraph.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n\r\n        // getting data for this portfolio from memory\r\n        var pDataInMemory = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n        if(pDataInMemory == null)\r\n        {\r\n            pDataInMemory = [];\r\n        }\r\n        else {\r\n            pDataInMemory = pDataInMemory[this.props.index];\r\n            if (pDataInMemory == null)\r\n            {\r\n                pDataInMemory = [];\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            requested_input: false,\r\n            name: this.props.name,\r\n            memory_index: this.props.index,\r\n            stock_list: pDataInMemory,\r\n            new_symbol: '',\r\n            new_quantity: '',\r\n            loading: false,\r\n            currency: '\\u0024', // dollar\r\n            currency_multiplier: 1,\r\n            old_multiplier: 1,\r\n            selected: {},\r\n            needs_refresh: {},\r\n            show_modal: false\r\n        };\r\n    }\r\n    \r\n    componentDidMount()\r\n    {\r\n        // updating local storage\r\n        var oldData = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n        if (oldData == null)\r\n        {\r\n            oldData = [];\r\n        }\r\n        oldData[this.state.memory_index] = this.state.stock_list;\r\n        window.localStorage.setItem('portfolioData', JSON.stringify(oldData));\r\n    }\r\n\r\n    \r\n    async getStockPrice(symbol)\r\n    {\r\n        /* \r\n            this function gets the latest stock price for a symbol;\r\n            it first searches the iextrading.com API because there are the most chances \r\n            for success there; if it doesn't find anything it searches the alphavantage api\r\n            as well \r\n            it's an asynchronous function\r\n        */\r\n        var url = \"https://api.iextrading.com/1.0/stock/\";\r\n        url = url + symbol + \"/price\";\r\n\r\n        return new Promise((resolve, reject) => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // found\r\n                    var stock_price = result;\r\n                    resolve(stock_price);\r\n                }\r\n                )\r\n            .catch((err) => {\r\n                // not found in the iextrading.com api, trying alphavantage\r\n\r\n                var other_url = \"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\";\r\n                other_url = other_url + symbol + \"&apikey=ICK74I6KCSZI8JZ1\";\r\n\r\n                fetch(other_url)\r\n                    .then(res => res.json())\r\n                    .then(\r\n                        (result) => {\r\n                            if(\"Note\" in result)\r\n                            {\r\n                                // API call limit exceded, will handle this code later\r\n                                resolve(-1);\r\n                            }\r\n                            else\r\n                            {\r\n                                if (\"05. price\" in result[\"Global Quote\"])\r\n                                {\r\n                                    // found\r\n                                    var stock_price = result[\"Global Quote\"][\"05. price\"];\r\n                                    resolve(stock_price);\r\n                                }\r\n                                else\r\n                                {\r\n                                    // not found for that symbol, will handle this code later\r\n                                    resolve(-2);\r\n                                }\r\n                            }\r\n                        }\r\n                        )\r\n            })\r\n        });\r\n    }\r\n\r\n    async refresh()\r\n    {\r\n        /*\r\n            this gets called when the refresh button is pressed\r\n            it parses the symbol_list from this.state and checks the stock price\r\n            for each symbol and updates it;\r\n        */\r\n        // for React Table component\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n\r\n        var stockList = this.state.stock_list;\r\n        var toRefresh = this.state.needs_refresh;\r\n        for(var i=0; i<stockList.length; i++)\r\n        {\r\n            toRefresh[stockList[i].stock_symbol] = true;\r\n        }\r\n\r\n        for (var key in toRefresh)\r\n        {\r\n            // parsing keys aka stock symbols\r\n            if(toRefresh[key] === true)\r\n            {\r\n                // finding the index of the current key in the main array\r\n                const index = stockList.findIndex(object => object.stock_symbol === key);\r\n                // API Calls -> awaiting for them to be finished\r\n                // i'm updating sequentially because it doesn't take long\r\n                // parallel updates could also be done but i didn't see the necessity\r\n\r\n                const value = await this.getStockPrice(key);\r\n\r\n                if(value >= 0)\r\n                {\r\n                    stockList[index].unit_value = value;\r\n                    stockList[index].total_value = value * stockList[index].stock_quantity;\r\n                    toRefresh[key] = false;\r\n                }\r\n                else\r\n                {\r\n                    // this shouldn't happen with the iextrading.com API\r\n                    alert(\"Not everything could be refreshed because of API call limits.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // setting state\r\n        this.setState({\r\n            stock_list: stockList,\r\n            needs_refresh: toRefresh,\r\n            loading: false\r\n        })\r\n\r\n        // updating localStorage\r\n        var oldData = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n        if (oldData == null)\r\n        {\r\n            oldData = [];\r\n        }\r\n        oldData[this.state.memory_index] = this.state.stock_list;\r\n        window.localStorage.setItem('portfolioData', JSON.stringify(oldData));\r\n    }\r\n\r\n    toggleRow(symbol) {\r\n        // this gets called when the user selects a stock from the table\r\n        var oldSelected = this.state.selected;\r\n        oldSelected[symbol] = !this.state.selected[symbol];\r\n\r\n        // memorising in state\r\n        this.setState({\r\n            selected: oldSelected\r\n        });\r\n    }\r\n\r\n    removeStocks() {\r\n        // the remove selected button triggers this\r\n        \r\n        var list = this.state.stock_list;\r\n        var selectionList = this.state.selected;\r\n\r\n        var toRemove = [];\r\n\r\n        // removing \r\n        for(var i=0; i<list.length; i++)\r\n        {\r\n            if(selectionList[list[i].stock_symbol] === true)\r\n            {\r\n                toRemove.push(i);\r\n                selectionList[list[i].stock_symbol] = false;\r\n            }\r\n        }\r\n\r\n        for(i=toRemove.length-1; i>=0; i--)\r\n        {\r\n            list.splice(toRemove[i], 1);\r\n        }\r\n\r\n        // updating state and local storage\r\n\r\n        this.setState({\r\n            stock_list: list,\r\n            selected: selectionList\r\n        });\r\n\r\n        var oldData = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n        if (oldData == null)\r\n        {\r\n            oldData = [];\r\n        }\r\n        oldData[this.state.memory_index] = this.state.stock_list;\r\n        window.localStorage.setItem('portfolioData', JSON.stringify(oldData));\r\n    }\r\n\r\n    showDollars() {\r\n        // changing state for conditional rendering\r\n\r\n        // encoded as \\u0024\r\n        \r\n        if (this.state.currency !== '\\u0024')\r\n        {\r\n            this.setState({\r\n                currency: '\\u0024',\r\n                currency_multiplier: 1.0\r\n            });\r\n        }\r\n    }\r\n\r\n    showEuros() {\r\n\r\n        // encoded as\\u20AC\r\n        \r\n        // will try to obtain latest exchange rate\r\n        // if there's a successfull api call a previous exchange rate state item is updated as well\r\n        // it will be used later in case the api call limit is exceded or some server error\r\n\r\n        if (this.state.currency !== '\\u20AC')\r\n        {\r\n            var url = \"http://data.fixer.io/api/latest?access_key=710c0551ec72322ca6cf7caead8f6dd8\";\r\n\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        if(result.success === true)\r\n                        {\r\n                            this.setState({\r\n                                currency: '\\u20AC',\r\n                                currency_multiplier: result.rates.USD,\r\n                                old_multiplier: result.rates.USD\r\n                            })\r\n                        }\r\n                        else\r\n                        {\r\n                            // checking if there was a successful call in the past\r\n                            if(this.state.old_multiplier === 1)\r\n                            {\r\n                                alert(\"API error. Most likely free limit reached. Couldn't complete operation.\");\r\n                            }\r\n                            else\r\n                            {\r\n                                alert(\"API error. Most likely free limit reached. Using old converter.\");\r\n                                this.setState({\r\n                                    currency: '\\u20AC',\r\n                                    currency_multiplier: this.state.old_multiplier\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                )\r\n        }\r\n    }\r\n    newStockBtn() {\r\n        // for conditional rendering\r\n        // showing new stock input form\r\n        this.setState({\r\n            requested_input: true\r\n        });\r\n    }\r\n\r\n    async addStockBtn() {\r\n\r\n        // checking input\r\n        if(this.state.new_symbol && this.state.new_quantity)\r\n        {\r\n            // converting string to number then checking if it's an integer\r\n            if(Number.isInteger(+this.state.new_quantity))\r\n            {\r\n                if(this.state.stock_list.length === 50)\r\n                {\r\n                    // symbol limit reached\r\n                    alert(\"Maximum number of different stocks is 50\");\r\n                }\r\n                else\r\n                {\r\n                    if(this.state.stock_list.some(e => e.stock_symbol === this.state.new_symbol))\r\n                    {\r\n                        // symbols must be different\r\n                        alert(\"Stocks must be different\");\r\n                    }\r\n                    else\r\n                    {\r\n                        // API Call\r\n                        const value = await this.getStockPrice(this.state.new_symbol);\r\n                        if(value >= 0)\r\n                        {\r\n                            // everything ok, adding to state and local storage\r\n                            var newList = this.state.stock_list;\r\n                            newList.push({\r\n                                stock_symbol: this.state.new_symbol.toUpperCase(),\r\n                                stock_quantity: this.state.new_quantity,\r\n                                unit_value: value,\r\n                                total_value: value * this.state.new_quantity,\r\n                            });\r\n\r\n                            this.setState({\r\n                                stock_list: newList,\r\n                                requested_input: false\r\n                            });\r\n\r\n                            var oldData = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n                            if (oldData == null)\r\n                            {\r\n                                oldData = [];\r\n                            }\r\n                            oldData[this.state.memory_index] = this.state.stock_list;\r\n                            window.localStorage.setItem('portfolioData', JSON.stringify(oldData));\r\n                        }\r\n                        else if(value === -1)\r\n                        {\r\n                            // API limit\r\n                            alert(\"API Calls exceded. Wait for a minute.\");\r\n                        }\r\n                        else if(value === -2)\r\n                        {\r\n                            // invalid stock symbol\r\n                            alert(\"Nothing found with that symbol.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                alert(\"That quantity is not an integer/number.\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            alert(\"Empty values not allowed.\");\r\n        }\r\n        \r\n    }\r\n    addStockCancel() {\r\n        // cancel pressed\r\n        this.setState({\r\n            requested_input: false\r\n        });\r\n    }\r\n    addStockSymbolChange(event) {\r\n        this.setState({\r\n            new_symbol: event.target.value\r\n        });\r\n    }\r\n    \r\n    addStockQuantityChange(event) {\r\n        this.setState({\r\n            new_quantity: event.target.value\r\n        });\r\n    }\r\n    \r\n    deleteItem(){\r\n        // calling function from parent\r\n        this.props.deletePortfolio(this.props.name);\r\n    }\r\n\r\n    objectMap(object, mapFn) {\r\n        return Object.keys(object).reduce(function(result, key) {\r\n            result[key] = mapFn(object[key])\r\n            return result\r\n        }, {})\r\n    }\r\n\r\n    perfGraph()\r\n    {\r\n        // for conditional rendering\r\n        this.setState({\r\n            show_modal: true\r\n        });\r\n    }\r\n\r\n    closeModal()\r\n    {\r\n        // for conditional rendering\r\n        this.setState({\r\n            show_modal: false\r\n        });\r\n    }\r\n\r\n    output() {\r\n        // this function is just for readability\r\n        // could have added this code in render as well\r\n        if(this.state.requested_input)\r\n        {\r\n            // showing new stock \"form\"\r\n            return <div className=\"w3-row-padding w3-card-2 w3-margin w3-blue-gray\">\r\n                   \r\n                    <div className=\"w3-row-padding w3-margin-top\">\r\n                        <h3>{this.state.name}</h3>\r\n                    </div>\r\n\r\n                    <div className=\"w3-row-padding w3-margin-top\">\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Stock symbol\"\r\n                                onChange={this.addStockSymbolChange}\r\n                                className=\"w3-input\"\r\n                            />\r\n                            <input\r\n                                placeholder=\"Quantity\"\r\n                                onChange={this.addStockQuantityChange}\r\n                                className=\"w3-input\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"w3-row-padding w3-margin-top w3-margin-bottom\">\r\n                            <button \r\n                                onClick={this.addStockCancel}\r\n                                className=\"w3-button w3-half w3-round w3-medium w3-blue-grey\">\r\n                                Cancel\r\n                            </button>\r\n                            <button \r\n                                onClick={this.addStockBtn}\r\n                                className=\"w3-button w3-half w3-round w3-medium w3-blue-grey\">\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>;\r\n        } else \r\n        {\r\n            // showing data table\r\n                const columns = [\r\n                {\r\n                    Header: 'Stock Name',\r\n                    accessor: 'stock_symbol' \r\n                },\r\n                {\r\n                    Header: 'Unit value (' + this.state.currency + ')',\r\n                    accessor: 'unit_value',\r\n                }, \r\n                {\r\n                    Header: 'Quantity',\r\n                    accessor: 'stock_quantity',\r\n                },\r\n                {\r\n                    Header: 'Total Value (' + this.state.currency + ')',\r\n                    accessor: 'total_value',\r\n                },\r\n                {\r\n                    Header: 'Select',\r\n                    accessor: 'selected',\r\n                    Cell: ({original}) => {\r\n                        return (\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                className=\"w3-check w3-right\"\r\n                                checked={this.state.selected[original.stock_symbol] === true}\r\n                                onChange={() => this.toggleRow(original.stock_symbol)}\r\n                            />\r\n                        );\r\n                    },\r\n                    sortable: false\r\n                }];\r\n            \r\n                var data = [];\r\n                for(var i=0; i<this.state.stock_list.length; i++)\r\n                {\r\n                    data.push({\r\n                        stock_symbol: this.state.stock_list[i].stock_symbol,\r\n                        unit_value: (this.state.stock_list[i].unit_value / this.state.currency_multiplier).toFixed(3),\r\n                        stock_quantity: this.state.stock_list[i].stock_quantity,\r\n                        total_value: (this.state.stock_list[i].total_value / this.state.currency_multiplier).toFixed(3)\r\n                    });\r\n                }\r\n\r\n                return <div className=\"w3-row-padding w3-card-2 w3-margin w3-container\">\r\n                        <div className=\"w3-row-padding w3-container\">\r\n\r\n                            <div className=\"w3-half w3-mobile w3-margin-top\">\r\n                                <h3>\r\n                                {this.state.name}\r\n                                </h3>\r\n                            </div>\r\n\r\n                            <div className=\"w3-row-padding w3-mobile w3-margin-top w3-bar\">\r\n                                <button className=\"w3-bar-item w3-mobile w3-button w3-round w3-small\" \r\n                                        onClick={this.showEuros}>\r\n                                        Show in Euros\r\n                                </button>\r\n\r\n                                <button className=\"w3-bar-item w3-mobile w3-button w3-round w3-small\"\r\n                                        onClick={this.showDollars}>\r\n                                        Show in Dollars\r\n                                </button>\r\n\r\n                                <button className=\"w3-bar-item w3-mobile w3-button w3-round w3-small\" \r\n                                        onClick={this.refresh}>\r\n                                        Refresh\r\n                                </button>\r\n\r\n                                <button className=\"w3-bar-item w3-mobile w3-button w3-round w3-small w3-right w3-dark-grey\"\r\n                                        onClick={this.deleteItem}>\r\n                                        Delete\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w3-row-padding w3-margin w3-card\">\r\n                            <ReactTable\r\n                                data={data}\r\n                                columns={columns}\r\n                                resolveData={data => data.map(row => row)}\r\n                                showPagination={false}\r\n                                loading={this.state.loading}\r\n                                style={{\r\n                                    height: \"250px\" // their documentation says that this is how vertical scroll is enabled\r\n                                                    // otherwise have to use default pagination - which isn't nice for this case\r\n                                }}\r\n                                className=\"-striped -highlight\"\r\n                                defaultPageSize={this.state.stock_list.length}\r\n                                noDataText={''}\r\n                                resizable={false}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"w3-row-padding w3-half w3-margin-top\">\r\n                            <h4>\r\n                            Total value of portfolio: {(this.state.stock_list.map(o=>o.total_value).reduce((a,c)=>a+c, 0) / this.state.currency_multiplier).toFixed(3)} {this.state.currency}\r\n                            </h4>\r\n                        </div>\r\n\r\n                        \r\n                            <div className=\"w3-row-padding w3-mobile w3-margin-top w3-bar w3-margin-bottom\">\r\n                                <button \r\n                                    onClick={this.newStockBtn}\r\n                                    className=\"w3-bar-item w3-mobile w3-button w3-round w3-small w3-blue-grey w3-margin-left w3-margin-top\">\r\n                                    Add Stock\r\n                                </button>\r\n                                <button \r\n                                    onClick={this.perfGraph}\r\n                                    className=\"w3-bar-item w3-mobile w3-button w3-round w3-small w3-blue-grey w3-margin-top w3-margin-left\">\r\n                                Performance Graph\r\n                                </button>\r\n                                <button \r\n                                    onClick={this.removeStocks}\r\n                                    className=\"w3-bar-item w3-mobile w3-button w3-round w3-small w3-right w3-dark-grey w3-margin-top\">\r\n                                Remove Selected\r\n                                </button>\r\n                            </div>\r\n                        \r\n                    </div>;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            // ReactModal triggers a modal window that shows performance graph data\r\n            <li>\r\n                <div >\r\n                    {this.output()}\r\n                </div>\r\n            \r\n\r\n                <div className=\"w3-row-padding\">\r\n                    <ReactModal\r\n                        isOpen={this.state.show_modal}\r\n                    >\r\n                        <div className=\"w3-row-padding\">\r\n                            <div className=\"w3-right\">\r\n                                <button \r\n                                onClick={this.closeModal}\r\n                                className=\"w3-button w3-mobile w3-round w3-small w3-right w3-dark-grey\"\r\n                                >\r\n                                Close\r\n                            </button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"w3-row-padding\">\r\n                            <Graph\r\n                                pName={this.state.name}\r\n                                sList={this.state.stock_list}\r\n                            >\r\n                            </Graph>\r\n                        </div>\r\n                        \r\n\r\n                    </ReactModal>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Portfolio;\r\n\r\n","import React from \"react\";\r\nimport Portfolio from \"./Portfolio\"\r\nimport 'w3-css/w3.css';\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /* binding click functions */\r\n    this.deletePortfolio = this.deletePortfolio.bind(this);\r\n\r\n    // pList is an array of Portfolio names\r\n    // each array is a dictionary of the symbol and quantity of that portfolio\r\n\r\n    // getting data from localStorage\r\n    var pListInMemory = JSON.parse(window.localStorage.getItem('portfolioNames'));\r\n    if (pListInMemory == null)\r\n    {\r\n      // if nothing saved yet\r\n      pListInMemory = [];\r\n    }\r\n    \r\n    // setting state from memory\r\n    this.state = {\r\n      pList: pListInMemory\r\n    }\r\n\r\n    // checking if it should add another portfolio\r\n    if(this.props.location.state !== undefined)\r\n    {\r\n      // this triggers when there's a successful redirect from the New Portfolio \"page\"\r\n\r\n      var oldList = this.state.pList;\r\n     \r\n      // max 10 portfolio requirement\r\n      if (oldList.length === 10)\r\n      {\r\n        alert (\"Maximum number of portfolios (10) already reached.\");\r\n      }\r\n      else\r\n      {\r\n        // adding to list\r\n        oldList.push(this.props.location.state.portName);\r\n\r\n        // setting state\r\n        this.state = {\r\n            pList: oldList\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n      // updating local storage\r\n      window.localStorage.setItem('portfolioNames', JSON.stringify(this.state.pList));\r\n  }\r\n\r\n  deletePortfolio(name) {\r\n      /* gets data from state, deletes what's needed and updates the state and \r\n         the local storage */\r\n\r\n      var new_pList = this.state.pList;\r\n      var index = new_pList.indexOf(name);\r\n      new_pList.splice(index, 1);\r\n      this.setState({pList: new_pList});\r\n\r\n      var old_dataList = JSON.parse(window.localStorage.getItem('portfolioData'));\r\n      old_dataList.splice(index, 1);\r\n\r\n      window.localStorage.setItem('portfolioNames', JSON.stringify(this.state.pList));\r\n      window.localStorage.setItem('portfolioData', JSON.stringify(old_dataList));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // returning a list of portfolios\r\n      // we pass as props the portfolio name and the index it has\r\n      // in the local storage array in order to save data for it later\r\n      <div>\r\n          <ul className=\"w3-ul\">\r\n              {this.state.pList.map((portfolio, index) =>\r\n              <Portfolio key = {portfolio}\r\n                         name = {portfolio}\r\n                         index = {index}\r\n                         deletePortfolio = {this.deletePortfolio} />)}\r\n          </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","import React from \"react\";\r\nimport {Redirect} from \"react-router\"\r\nimport 'w3-css/w3.css';\r\n\r\nclass NewPortfolio extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // stores portfolio name and whether we're done adding and should redirect to home \"page\"\r\n    this.state = {portName: '',\r\n                  toHome: false};\r\n\r\n    // binding functions\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n  handleChange(event) {\r\n    // memorising input as it changes\r\n    this.setState({portName: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n\r\n    if (this.state.portName)\r\n    {\r\n      // checking input\r\n      this.setState(() => ({\r\n        toHome: true\r\n      }))\r\n    }\r\n    else\r\n    {\r\n      alert(\"You must add a correct name or go back to Home.\");\r\n    }\r\n    \r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.toHome === true)\r\n    {\r\n      // redirecting if we're done\r\n      return (<Redirect to={{\r\n                              pathname: '/',\r\n                              state: { portName: this.state.portName }\r\n                            }} />)\r\n    }\r\n\r\n    return (\r\n      <div className=\"w3-card-4 w3-row-padding w3-margin\">\r\n        <div className=\"w3-container w3-row-padding w3-blue-gray\">\r\n            <h2>New portfolio</h2>\r\n        </div>\r\n\r\n        <form className=\"w3-container\" onSubmit={this.handleSubmit}>\r\n          <input \r\n            placeholder=\"Portfolio Name\"\r\n            onChange={this.handleChange}\r\n            className=\"w3-input w3-margin-top\"\r\n            />\r\n          <button className=\"w3-btn w3-block w3-medium w3-blue-gray w3-margin-top w3-margin-bottom\" type=\"submit\">Add Portfolio</button>\r\n        </form>\r\n\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n \r\nexport default NewPortfolio;","import React from \"react\";\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Home\";\r\nimport NewPortfolio from \"./NewPortfolio\";\r\nimport 'w3-css/w3.css';\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    return (\r\n        /* creating navigation routes */\r\n        /* the home page displays the portfolio list and data and there's another \r\n           route to add a new portfolio */\r\n        /* router is not really necessary for this app */\r\n        <HashRouter>\r\n        <div>\r\n          <ul className=\"w3-bar w3-blue-gray w3-row-padding\">\r\n            <li className=\"w3-bar-item w3-button w3-mobile\"><NavLink exact to=\"/\">Home</NavLink></li>\r\n            <li className=\"w3-bar-item w3-button w3-mobile\"><NavLink to=\"/new\">Add a portfolio</NavLink></li>\r\n          </ul>\r\n          <div className=\"content w3-bar\">\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/new\" component={NewPortfolio}/>\r\n          </div>\r\n        </div>\r\n        </HashRouter>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Main;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\n\nReactDOM.render(\n  <Main/>, \n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}